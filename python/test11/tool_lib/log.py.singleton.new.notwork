import logging

class Log():
    __instance = None

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls, *args, **kwargs)

        logging.info("new instance:{}".format(cls.__instance))
        return cls.__instance

    def __init__(self):
        self.__loggers = {}
        self.__level = logging.INFO
        self.__format = None

    def getLoggers(self):
        """
        Return the singleton logger and set logging level
        """
        return self.__loggers


    def getLogger(self, name="root"):
        """
        Return the singleton logger and set logging level
        """
        if not self.__loggers.get(name):
            if name == "root":
                self.__loggers[name] = logging.getLogger()
            else:
                self.__loggers[name] = logging.getLogger(name)


        self.__loggers[name].setLevel(self.__level)

        logging.info("loggers:%s", self.getLoggers())
        return self.__loggers[name]

    def setLevel(self, level=logging.INFO):
        """
        Apply logging level to all loggers
        """
        logging.critical("set level: %d to %s", level, self.__loggers)
        self.__level = level
        for name in self.__loggers:
            self.__loggers[name].setLevel(self.__level)

